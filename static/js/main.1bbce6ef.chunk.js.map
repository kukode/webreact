{"version":3,"sources":["helper.js","App.js","serviceWorker.js","index.js"],"names":["axio","axios","create","baseURL","timeout","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dataGuest","fullName","email","phoneNumber","company","description","id","edit","event","setState","defineProperty","target","name","value","data","console","log","api","post","loadData","hapus","window","confirm","delete","concat","guest","find","put","get","_this2","react_default","a","createElement","className","reactstrap_es","for","type","onChange","e","handleChange","placeholder","color","onClick","handleEditSave","handleSubmit","map","member","key","scope","handleDelete","handleEdit","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bbce6ef.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst axio = axios.create({\n    baseURL: 'https://apiguest.herokuapp.com/api',\n    // baseURL: 'http://localhost:7000/api',\n    timeout: 1000\n});\n\nexport default axio","import React, { Component } from 'react';\nimport {Button,FormGroup,Label,Input,Table} from  'reactstrap'\nimport api from './helper';\nimport './App.css';\n\n\nclass App extends Component {\n\n    constructor(props){\n      super(props)\n      this.state = {\n        dataGuest : [],\n        fullName : '',\n        email : '',\n        phoneNumber : '',\n        company : '',\n        description : '',\n        id: '',\n        edit: false\n      }\n      \n    }\n    async handleChange(event) {\n      this.setState({[event.target.name]: event.target.value});\n      \n    }\n    async handleSubmit(){\n        let data = {\n          fullName : this.state.fullName,\n          email : this.state.email,\n          phoneNumber : this.state.phoneNumber,\n          company : this.state.company,\n          description : this.state.description\n\n        } \n        console.log(data)\n       \n       \n        await api.post('/guest',data)\n        this.loadData()\n       \n    }\n   async handleDelete(id){\n      \n      const hapus = window.confirm(\"Press a button!\");\n      console.log(hapus)\n      if(hapus){\n        await api.delete(`/guest/${id}`)\n        this.loadData()\n      }\n      \n      \n\n    }\n    async handleEdit(id){\n      // alert('edit')\n      const guest  = this.state.dataGuest.find(guest=>guest.id===id)\n      \n        this.setState({\n        fullName: guest.fullName,\n        email : guest.email,\n        phoneNumber : guest.phoneNumber,\n        company: guest.company,\n        description : guest.description,\n        edit: !this.state.edit,\n        id: id\n      })\n     \n\n    }\n\n    async handleEditSave(id){\n        await api.put(`/guest/${id}`,{\n          fullName: this.state.fullName,\n          email : this.state.email,\n          phoneNumber : this.state.phoneNumber,\n          company: this.state.company,\n          description : this.state.description\n        })\n\n        this.setState({\n          fullName: '',\n          email:'',\n          phoneNumber: '',\n          company: \"\",\n          description: '',\n          edit: !this.state.edit,\n        })\n        this.loadData()\n    }\n\n\n    async loadData(){\n      const {data} = await api.get('/guests')\n      console.log(data)\n      this.setState({dataGuest : data})\n    }\n    componentDidMount(){\n        this.loadData()\n    }\n\n\n\n\n\n\n  render() {\n    console.log(this.state.dataGuest)\n    return (\n      <div className=\"container\">\n            <h1 className=\"text-center\">Buku Tamu</h1>\n            <FormGroup>\n              <Label for=\"fullName\">Nama Lengkap</Label>\n              <Input type=\"text\" name=\"fullName\"  value={this.state.fullName} onChange={(e)=>this.handleChange(e)} placeholder=\"input nama\" />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"Email\">Email</Label>\n              <Input type=\"email\" name=\"email\"  value={this.state.email} onChange={(e)=>this.handleChange(e)} placeholder=\"input email\" />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"phoneNumber\">Nomor Telepon</Label>\n              <Input type=\"number\" name=\"phoneNumber\"  value={this.state.phoneNumber} onChange={(e)=>this.handleChange(e)} placeholder=\"input nomor telepon\" />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"company\">Perusahaan</Label>\n              <Input type=\"text\" name=\"company\"  value={this.state.company} onChange={(e)=>this.handleChange(e)} placeholder=\"input perusahaan\" />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"description\">Keterangan</Label>\n              <Input type=\"textarea\" name=\"description\" value={this.state.description} onChange={(e)=>this.handleChange(e)} placeholder=\"input keterangan kunjungan\"  />\n            </FormGroup>\n            {this.state.edit ? <Button color=\"primary\" onClick={()=>this.handleEditSave(this.state.id)}>Edit</Button> : <Button color=\"primary\" onClick={()=>this.handleSubmit()}>Simpan</Button>}\n            \n            \n\n            <Table>\n              <thead>\n                <tr>\n                  <th>Id</th>\n                  <th>Nama Lengkap</th>\n                  <th>Email</th>\n                  <th>phoneNumber</th>\n                  <th>Perusahaan</th>\n                  <th>Keterangan</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.dataGuest.map(member=>(\n                 \n                  <tr key={member.id}> \n                    <th scope=\"row\">{member.id}</th>\n                    <td>{member.fullName}</td>\n                    <td>{member.email}</td>\n                    <td>{member.phoneNumber}</td>\n                    <td>{member.company}</td>\n                    <td>{member.description}</td>\n                    <td><Button className=\"btn-danger\" onClick={()=>this.handleDelete(member.id)}>Hapus</Button> ||<Button className=\"btn-warning\" onClick={()=>this.handleEdit(member.id)}>Edit</Button> </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}